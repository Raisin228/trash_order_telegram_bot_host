import os
from random import choice

import aiogram.utils.exceptions
from aiogram import Bot
from aiogram import types
from aiogram.dispatcher import FSMContext
from dotenv import load_dotenv

from order_telegram_bot.bot.config import *
from order_telegram_bot.bot.handlers.user.user_states import UserMenuStatesGroup
from order_telegram_bot.bot.keyboards.user.inlinekb import *
from order_telegram_bot.bot.keyboards.user.replykb import *

from order_telegram_bot.sqlite_bot.sqlite import *
from order_telegram_bot.bot.other import *

# –∑–∞–±–∏—Ä–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ .env
load_dotenv()
TOKEN = os.getenv('API_KEY')
PAY_TOKEN = os.getenv('PAY_TOKEN')
GEO_TOKEN = os.getenv('YANDEX_GEO_TOKEN')
bot = Bot(token=TOKEN)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


async def start_user_cmd(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEJ7ytkz0X-9bZnxbLmTShkDPl8bl-UtQAC2A8AAkjyYEsV-8TaeHRrmC8E')
    await message.answer(text=START_USER_TEXT, parse_mode='html',
                         reply_markup=user_start_keyboard(message.from_user.id))


async def help_user_cmd(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(text=HELP_USER_TEXT, parse_mode='html')


async def description_cmd(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /desk(–æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞)"""
    await message.answer(text=DESCRIPTION_USER, parse_mode='html')


async def get_events(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '–ß—Ç–æ –±—É–¥–µ—Ç?' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π"""
    data_events = week_events()
    if data_events:
        await message.answer(text=EVENTS_7DAYS, parse_mode='html')
    else:
        await message.answer(text=NO_EVENTS)
    # –≤—ã–≤–æ–¥ —Å–æ–±—ã—Ç–∏–π
    for i in data_events:
        if i[5] == '-':
            await message.answer_photo(i[2], caption=f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ: </b>{i[1]}\n<b>–î–∞—Ç–∞: </b>{i[4]}\n'
                                                     f'<b>–û–ø–∏—Å–∞–Ω–∏–µ: </b>{i[3]}', parse_mode='html')
        else:
            await message.answer_photo(i[2], caption=f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ: </b>{i[1]}\n<b>–î–∞—Ç–∞: </b>{i[4]}\n'
                                                     f'<b>–û–ø–∏—Å–∞–Ω–∏–µ: </b>{i[3]}', parse_mode='html',
                                       reply_markup=inline_event_keyboard(i[5]))


async def get_menu_position(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ–Ω—é"""
    if menu_positions():
        await UserMenuStatesGroup.viewing_menu.set()
        await message.answer(text=CHOOSE_BURGER,
                             reply_markup=user_menu_keyboard())
    else:
        await message.answer(text='–í –º–µ–Ω—é –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç', reply_markup=user_start_keyboard(message.from_user.id))
        await state.finish()


async def choice_position_menu(message: types.Message, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –º–µ–Ω—é"""

    # –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞
    if message.text.lower() == '‚¨ÖÔ∏è –≤–µ—Ä–Ω—É—Ç—å—Å—è':
        await state.finish()
        await message.answer(text='–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!', reply_markup=user_start_keyboard(message.from_user.id))
    else:
        await state.finish()
        # —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö(–∫–ª—é—á - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞)
        menu_dict = menu_positions()

        await message.delete()

        try:
            await message.answer(text='–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä!üëç', reply_markup=user_menu_position())
            await message.answer_photo(menu_dict[message.text][0],
                                       caption=f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {message.text}\n'
                                               f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>{menu_dict[message.text][1]}\n'
                                               f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {menu_dict[message.text][2]}',
                                       parse_mode='html',
                                       reply_markup=inline_basket_keyboard())
        except KeyError:
            await message.answer(text='–¢–∞–∫–æ–≥–æ –±–ª—é–¥–∞ —É –Ω–∞—Å –Ω–µ—Ç(')


async def back_menu_cmd(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer(text='–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!', reply_markup=user_start_keyboard(message.from_user.id))


async def back_in_menu_cmd(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–µ –º–µ–Ω—é"""
    await UserMenuStatesGroup.viewing_menu.set()
    await message.answer(text='–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –Ω–∞—à–∏—Ö –±—É—Ä–≥–µ—Ä–æ–≤!', reply_markup=user_menu_keyboard())


async def callback_add_basket(callback: types.CallbackQuery):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ inline –∫–Ω–æ–ø–∫–∏"""
    data = callback.data
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–∞–Ω–Ω—ã—Ö
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ä–∑–∏–Ω—ã
    if data.split()[0] == 'B':
        if data.split()[1] == '+':
            product_data = add_basket(callback.from_user.id, ' '.join(data.split()[2:]))
            await callback.message.edit_reply_markup(reply_markup=inline_product_keyboard(product_data=product_data))

        if data.split()[1] == '-':
            product_data = add_basket(callback.from_user.id, data.split()[2], type_add='-')
            try:
                await callback.message.edit_reply_markup(
                    reply_markup=inline_product_keyboard(product_data=product_data))
            except aiogram.utils.exceptions.MessageNotModified:
                await callback.answer()
        # –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å—á–µ—Ç—á–∏–∫
        if data == 'count':
            await callback.answer()
    else:
        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é
        # –µ—Å–ª–∏ —Ä–µ—à–∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª-–≤–æ
        if data.split()[0] == '+':
            await callback.message.edit_reply_markup(reply_markup=inline_basket_keyboard(count_product=int(
                data.split()[1]) + 1))
        # –µ—Å–ª–∏ —Ä–µ—à–∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª-–≤–æ
        elif data.split()[0] == '-':
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ–±—ã –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –Ω–µ —É—Ö–æ–¥–∏—Ç—å < 0
            if data.split()[1] != '1':
                await callback.message.edit_reply_markup(reply_markup=inline_basket_keyboard(count_product=int(
                    data.split()[1]) - 1))
            else:
                await callback.answer()
        # –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å—á–µ—Ç—á–∏–∫
        elif data == 'count':
            await callback.answer()
        else:
            # –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
            for i in range(int(data)):
                product_data = add_basket(callback.from_user.id,
                                          ' '.join(callback.message.caption.split('\n')[0].split()[1:]))
            await callback.answer(text='–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!')


async def viewing_basket_cmd(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ—Ä–∑–∏–Ω—ã"""
    await message.delete()
    data = get_basket_data(message.from_user.id)
    if data:
        if type(data[1]) == dict:
            product_names = list(data[1].keys())

            if product_names[0]:
                await message.answer(text='–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ —Å–µ–π—á–∞—Å:', reply_markup=edit_basket_keyboard())
                product_count = data[1]
                menu_dict = menu_positions()

                for product in product_count:
                    await message.answer(text=f'{product} - {menu_dict[product][2]}—Ä—É–±/—à—Ç.',
                                         reply_markup=inline_product_keyboard([product, product_count[product][0]]))
            else:
                await message.answer(text='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')
        else:
            await message.answer(text='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')
    else:
        await message.answer(text='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')


async def clear_basket_cmd(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã"""
    res_delete = clear_basket(message.from_user.id)
    if res_delete:
        await message.answer(text='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –ø—É—Å—Ç–∞', reply_markup=user_start_keyboard(message.from_user.id))
    else:
        await message.answer(text='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞', reply_markup=user_start_keyboard(message.from_user.id))


async def cancel_order_cmd(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    await message.answer(text='–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=edit_basket_keyboard())
    await state.finish()


async def start_order_cmd(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    check_basket = get_basket_data(message.from_user.id)
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É –∫–æ—Ä–∑–∏–Ω—ã –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑–æ–º
    if type(check_basket[1]) == dict:
        if check_basket[3]:
            await message.answer(text=f'–û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–∏–π –∞–¥—Ä–µ—Å?\n{check_basket[3]}', reply_markup=choice_keyboard())
            await UserMenuStatesGroup.choice_address.set()
        else:
            await message.answer(text=ADDRESS, reply_markup=user_order_cancel())
            await UserMenuStatesGroup.enter_address.set()
    else:
        await message.answer(text=IMPOSSIBLE_TO_ORDER,
                             reply_markup=user_start_keyboard(message.from_user.id))


async def address(message: types.Message):
    """–û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∞–¥—Ä–µ—Å –∏–ª–∏ –¥–µ–ª–∞–µ–º –Ω–æ–≤—ã–π"""
    if message.text.lower() == '–¥–∞':
        bd_num_phone = get_basket_data(message.from_user.id)[4]
        if bd_num_phone:
            await message.answer(text=f'–≠—Ç–æ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {bd_num_phone}?', reply_markup=choice_keyboard())
            await UserMenuStatesGroup.choice_phone.set()
    else:
        await message.answer(text=ADDRESS,
                             reply_markup=user_order_cancel())
        await UserMenuStatesGroup.enter_address.set()


async def enter_address_step(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏"""
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    check = check_address(message.text, GEO_TOKEN)
    bd_num_phone = get_basket_data(message.from_user.id)[4]
    if not check:
        write_address(message.from_user.id, message.text)
        if bd_num_phone:
            await message.answer(text=f'–≠—Ç–æ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {bd_num_phone}?', reply_markup=choice_keyboard())
            await UserMenuStatesGroup.choice_phone.set()

        else:
            await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
            await UserMenuStatesGroup.user_phone.set()

    else:
        await message.answer(text=DONT_CORRECT_ADDRESS)
        await UserMenuStatesGroup.enter_address.set()


async def phone(message: types.Message):
    """–í—ã–±–æ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.text.lower() == '–¥–∞':
        await message.answer(text='–û—Ç–ª–∏—á–Ω–æ! —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', reply_markup=user_payment_keyboard())
        await UserMenuStatesGroup.choice_payment.set()
    elif message.text.lower() == '–Ω–µ—Ç':
        await message.answer(text='–¢–æ–≥–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=user_order_cancel())
        await UserMenuStatesGroup.user_phone.set()
    else:
        await message.answer(text='–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞(')
        await UserMenuStatesGroup.choice_phone.set()


async def get_user_phone(message: types.Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if phone_check(message.text):
        write_phone(message.from_user.id, message.text)
        await message.answer('–û—Ç–ª–∏—á–Ω–æ! —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', reply_markup=user_payment_keyboard())
        await UserMenuStatesGroup.choice_payment.set()
    else:
        await message.answer('–í–≤–µ–¥–µ–Ω –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await UserMenuStatesGroup.user_phone.set()


async def payment(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Ç–æ–≥–æ–≤—ã–º –∑–∞–∫–∞–∑–æ–º
    order_str = str()
    basket_data = get_basket_data(message.from_user.id)
    products = basket_data[1]

    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –≤ –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    for product in products:
        order_str += f'{product} - {products[product][0]}—à—Ç - {products[product][1]}—Ä—É–±.\n'
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–¥—Ä–µ—Å–µ
    notif_for_cafe_worker = order_str
    order_str += f'–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n{basket_data[3]}\n'

    if message.text.lower() == 'üí≥ –∫–∞—Ä—Ç–æ–π':
        await state.finish()

        # —Ü–µ–Ω–∞
        price = types.LabeledPrice(label='–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞', amount=basket_data[2] * 100)
        # –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
        try:
            await message.answer(text='–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –æ–ø–ª–∞—Ç–µ', reply_markup=user_order_cancel())
            await message.bot.send_invoice(message.from_user.id,
                                           title=f'–ó–∞–∫–∞–∑ –¥–ª—è {message.from_user.username}',
                                           description=order_str,
                                           provider_token=PAY_TOKEN,
                                           currency='rub',
                                           prices=[price],
                                           start_parameter='order_pay',
                                           payload=f'user_{message.from_user.id}')
        except aiogram.utils.exceptions.BadRequest:
            await message.answer(text='–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏')
            await UserMenuStatesGroup.enter_address.set()

    elif message.text.lower() == 'üíµ –Ω–∞–ª–∏—á–Ω—ã–º–∏':
        order_str += f'\n–ò—Ç–æ–≥: {basket_data[2]}RUB'
        await message.answer(text='–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!')
        # –æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        clear_basket(message.from_user.id)
        await message.answer(text='–í–∞—à –∑–∞–∫–∞–∑:\n' + order_str, reply_markup=user_start_keyboard(message.from_user.id))
        await message.bot.send_message(chat_id=get_admin_cafe_id('YES'),
                                       text=f'@{message.from_user.username} —Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑!\n'
                                            f'–ó–∞–∫–∞–∑:\n{order_str}\n–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏\n'
                                            f'–ù–æ–º–µ—Ä: {basket_data[4]}')

        # —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫—É –∫–∞—Ñ–µ
        cafe_worker_id = get_admin_cafe_id('CAFE')
        if cafe_worker_id is not None:
            await message.bot.send_message(chat_id=get_admin_cafe_id('CAFE'),
                                           text=f'<b>–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–∫–∞–∑:</b> {notif_for_cafe_worker}'
                                                f'–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!!',
                                           parse_mode='html')
        await state.finish()
    else:
        await message.answer(DONT_CORRECT_PAYMENT)
        await UserMenuStatesGroup.choice_payment.set()


async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""
    # –¥–∞–µ—Ç—Å—è 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await pre_checkout_q.bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


async def successful_payment(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""

    # —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(text=f'–ó–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100}'
                              f'{message.successful_payment.currency} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ!',
                         reply_markup=user_start_keyboard(message.from_user.id))

    # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–∫–∞–∑–æ–º –¥–ª—è –∞–¥–º–∏–Ω–∞
    order_str = str()
    basket_data = get_basket_data(message.from_user.id)
    products = basket_data[1]

    for product in products:
        order_str += f'{product} - {products[product][0]}—à—Ç - {products[product][1]}—Ä—É–±.\n'

    notif_for_cafe_worker = order_str
    order_str += f'–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n{basket_data[3]}\n'
    order_str += f'\n–ò—Ç–æ–≥: {basket_data[2]}RUB'

    # —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
    await message.bot.send_message(chat_id=get_admin_cafe_id('YES'),
                                   text=f'@{message.from_user.username} —Å–¥–µ–ª–∞–ª –∑–∞–∫–∞–∑!\n'f'–ó–∞–∫–∞–∑:\n{order_str}\n'
                                        f'–û–ø–ª–∞—á–µ–Ω–æ –∫–∞—Ä—Ç–æ–π\n–ù–æ–º–µ—Ä: {basket_data[4]}')
    # —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫—É –∫–∞—Ñ–µ
    cafe_worker_id = get_admin_cafe_id('CAFE')
    if cafe_worker_id is not None:
        await message.bot.send_message(chat_id=get_admin_cafe_id('CAFE'),
                                       text=f'<b>–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–∫–∞–∑:</b> {notif_for_cafe_worker} '
                                            f'–≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!!',
                                       parse_mode='html')
    # –æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    clear_basket(message.from_user.id)


async def send_sticker(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç–∏–∫–µ—Ä"""
    await bot.send_sticker(message.chat.id, choice(list_stickers))


async def dont_understend(message: types.Message):
    """–ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª —Ç–æ —á—Ç–æ –º—ã –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–ª–∏"""
    await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ —è –í–∞—Å –Ω–µ –ø–æ–Ω—è–ª üò•')
